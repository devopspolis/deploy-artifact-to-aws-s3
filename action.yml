name: 'Deploy artifact to AWS S3'
description: 'Deploys an artifact to AWS S3'
author: 'Rick Meneely <rick@devopspolis.com>'
branding:
  icon: cloud-drizzle
  color: purple

inputs:
  artifact-name:
    description: Name of the artifact to deploy (source)
    type: string
    required: true
  bucket:
    description: AWS S3 Bucket name (destination)
    type: string
    required: true
  bucket_region:
    description: AWS S3 Bucket region
    type: string
    required: true
  delete:
    description: Delete files not in source
    type: boolean
    default: true
  extract-artifact:
    description: |
      If true extracts the ZIP and uploads contents.
      If false, uploads ZIP as-is
    type: boolean
    default: true
  role:
    description: AWS role to assume
    type: string
    required: false
  tags:
    description: Bucket tags (e.g. version=v1.2.0,environment=qa)
    type: string
    required: false
    default: ''

outputs:
  bucket_arn:
    description: The AWS S3 bucket ARN
    value: ${{ steps.bucket_arn.outputs.bucket_arn }}
  integrity_hash:
    description: MD5 hash of uploaded contents (for integrity verification)
    value: ${{ steps.hash.outputs.integrity_hash }}

runs:
  using: composite
  steps:
    - name: Resolve role ARN if short name
      if: inputs.role
      id: resolve-role
      shell: bash
      run: |
        role="${{ inputs.role }}"
        if [[ "$role" != arn:aws:iam::* ]]; then
          echo "Resolving short role name to full ARN..."
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          role="arn:aws:iam::$ACCOUNT_ID:role/$role"
        fi
        echo "role_arn=$role" >> $GITHUB_OUTPUT

    - name: Configure AWS credentials
      if: ${{ inputs.role }}
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        role-to-assume: ${{ steps.resolve-role.outputs.role_arn }}
        role-session-name: GitHubActionDeploySession

    - name: Set delete flag
      run: |
        echo "delete_option=$([[ '${{ inputs.delete }}' == 'true' ]] && echo '--delete')" >> $GITHUB_ENV
      shell: bash

    - name: Download GitHub artifact
      uses: actions/download-artifact@v4
      with:
        name: ${{ inputs.artifact-name }}
        path: artifact-download

    - name: Extract artifact (if extract-artifact is true)
      if: ${{ inputs.extract-artifact == 'true' }}
      run: |
        mkdir extracted
        unzip -q artifact-download/${{ inputs.artifact-name }}.zip -d extracted
      shell: bash

    - name: Upload to S3 (extracted contents)
      if: ${{ inputs.extract-artifact == 'true' }}
      run: |
        echo "Uploading extracted contents to s3://${{ inputs.bucket }}"
        aws s3 sync extracted s3://${{ inputs.bucket }} ${{ env.delete_option }} --region ${{ inputs.bucket_region }}
      shell: bash

    - name: Upload to S3 (ZIP as-is)
      if: ${{ inputs.extract-artifact == 'false' }}
      run: |
        echo "Uploading ZIP to s3://${{ inputs.bucket }}"
        aws s3 cp artifact-download/${{ inputs.artifact-name }}.zip s3://${{ inputs.bucket }}/ --region ${{ inputs.bucket_region }}
      shell: bash

    - name: Add Bucket Tags
      if: ${{ inputs.tags != '' }}
      run: |
        bucket_name=$(echo "${{ inputs.bucket }}" | cut -d'/' -f1)
        IFS=',' read -ra PAIRS <<< "${{ inputs.tags }}"
        TAGSET=""
        for pair in "${PAIRS[@]}"; do
          KEY=$(echo "$pair" | cut -d'=' -f1)
          VALUE=$(echo "$pair" | cut -d'=' -f2-)
          TAGSET="${TAGSET}{Key=${KEY},Value=${VALUE}},"
        done
        TAGSET="[${TAGSET%,}]"
        aws s3api put-bucket-tagging --bucket "$bucket_name" --tagging "TagSet=$TAGSET"
      shell: bash

    - name: Output bucket ARN
      id: bucket_arn
      run: |
        echo "bucket_arn=arn:aws:s3:::${{ inputs.bucket }}" >> $GITHUB_OUTPUT
      shell: bash

    - name: Generate integrity hash
      id: hash
      run: |
        if [[ '${{ inputs.extract-artifact }}' == 'true' ]]; then
          HASH=$(find extracted -type f -exec md5sum {} + | sort -k 2 | md5sum | awk '{print $1}')
        else
          HASH=$(md5sum artifact-download/${{ inputs.artifact-name }}.zip | awk '{print $1}')
        fi
        echo "integrity_hash=$HASH" >> $GITHUB_OUTPUT
      shell: bash
